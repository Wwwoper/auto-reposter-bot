"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""

from pathlib import Path
from typing import Set

from aiogram import Bot, types
from aiogram.types import BotCommand

from src.utils.logger import logger
from src.utils.stats import get_stats
from src.utils.file_validator import prepare_file_for_upload
from src.vk.api import VKAPI
from src.config.constants import (
    BOT_WELCOME_MESSAGE,
    BOT_NO_ACCESS_MESSAGE,
    BOT_SHUTTING_DOWN_MESSAGE,
    BOT_FILE_NOT_READY_MESSAGE,
    BOT_UPLOADING_MESSAGE,
    BOT_ERROR_MESSAGE,
    BOT_SUCCESS_MESSAGE,
)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è graceful shutdown
_is_shutting_down = False


def set_shutting_down(value: bool) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ graceful shutdown"""
    global _is_shutting_down
    _is_shutting_down = value


def is_shutting_down() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–ª–∞–≥ graceful shutdown"""
    return _is_shutting_down


async def setup_bot_commands(bot: Bot) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"),
    ]

    await bot.set_my_commands(commands)
    logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")


async def send_welcome(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or "–±–µ–∑ username"

    logger.info(
        f"–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /{message.text.strip('/')} "
        f"–¥–ª—è user_id={user_id} (chat_id={chat_id}, username=@{username})"
    )

    await message.reply(BOT_WELCOME_MESSAGE)


async def send_stats(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or "–±–µ–∑ username"

    logger.info(
        f"–í—ã–∑–≤–∞–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ "
        f"–¥–ª—è user_id={user_id} (chat_id={chat_id}, username=@{username})"
    )

    stats = get_stats()
    stats_dict = stats.get_dict()

    # –í—Ä–µ–º—è –ø–æ –ú–°–ö
    msk_time = stats.get_current_msk_time()

    report_lines = [
        "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê*",
        "",
        f"üïê –í—Ä–µ–º—è: {msk_time.strftime('%d.%m.%Y %H:%M')}",
        f"‚è± –†–∞–±–æ—Ç–∞–µ—Ç: {stats_dict['uptime']['formatted']}",
        "",
        "üìÖ *–ó–ê –°–£–¢–ö–ò:*",
        f"üìù –ü–æ–ª—É—á–µ–Ω–æ: {stats_dict['daily']['total']}",
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats_dict['daily']['success']}",
        f"‚ùå –û—à–∏–±–æ–∫: {stats_dict['daily']['errors']}",
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º success rate —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –ø–æ—Å—Ç—ã
    if stats_dict["daily"]["total"] > 0:
        report_lines.append(f"üìà Success: {stats_dict['daily']['success_rate']:.1f}%")

    report_lines.extend(
        [
            "",
            "üìä *–ó–ê –í–°–Å –í–†–ï–ú–Ø:*",
            f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats_dict['total']['total']}",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats_dict['total']['success']}",
            f"‚ùå –û—à–∏–±–æ–∫: {stats_dict['total']['errors']}",
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º success rate —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –ø–æ—Å—Ç—ã
    if stats_dict["total"]["total"] > 0:
        report_lines.append(f"üìà Success: {stats_dict['total']['success_rate']:.1f}%")

        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
        success_rate = stats_dict["total"]["success_rate"]
        if success_rate >= 99:
            quality = "üåü –û—Ç–ª–∏—á–Ω–æ!"
        elif success_rate >= 95:
            quality = "‚úÖ –•–æ—Ä–æ—à–æ"
        elif success_rate >= 90:
            quality = "‚ö†Ô∏è –ù–æ—Ä–º–∞"
        else:
            quality = "‚ùå –ù—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞"

        report_lines.extend(
            [
                "",
                f"–û—Ü–µ–Ω–∫–∞: {quality}",
            ]
        )

    await message.answer("\n".join(report_lines), parse_mode="Markdown")


async def handle_photo(
    message: types.Message, bot: Bot, vk: VKAPI, white_list: Set[int], temp_dir: Path
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ Telegram

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        vk: –≠–∫–∑–µ–º–ø–ª—è—Ä VK API
        white_list: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö chat_id
        temp_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ graceful shutdown
    if _is_shutting_down:
        await message.reply(BOT_SHUTTING_DOWN_MESSAGE)
        logger.warning(f"–û—Ç–∫–ª–æ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {message.chat.id}: –±–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ white list
    if chat_id not in white_list:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: "
            f"user_id={user_id} (chat_id={chat_id}, username=@{username})"
        )
        await message.reply(BOT_NO_ACCESS_MESSAGE)
        return

    stats = get_stats()

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–æ—Ç–æ
        text = message.caption or ""
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        file_id = photo.file_id

        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id} "
            f"(chat_id={chat_id}, username=@{username}), file_id: {file_id}"
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        temp_dir.mkdir(parents=True, exist_ok=True)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
        local_filename = temp_dir / f"{file_id}.jpg"

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        await file.download(destination=str(local_filename))
        logger.debug(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {local_filename}")

        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
        if not await prepare_file_for_upload(str(local_filename)):
            await message.reply(BOT_FILE_NOT_READY_MESSAGE)
            stats.increment_error()
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        status_msg = await message.reply(BOT_UPLOADING_MESSAGE)

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –í–ö
        result = await vk.create_post_from_wall(str(local_filename), text)

        if result and "response" in result:
            post_id = result["response"].get("post_id")
            success_message = BOT_SUCCESS_MESSAGE.format(post_id=post_id)
            await status_msg.edit_text(success_message)

            logger.info(
                f"–£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ {post_id} "
                f"–æ—Ç user_id={user_id} (chat_id={chat_id})"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—Ö–∞
            stats.increment_success()

            # –ö–∞–∂–¥—ã–µ N —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ - –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if stats.should_log_stats():
                logger.info(stats.get_log_stats())
        else:
            await status_msg.edit_text(BOT_ERROR_MESSAGE)
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ—Ç user_id={user_id} (chat_id={chat_id})"
            )
            stats.increment_error()

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –æ—Ç user_id={user_id} (chat_id={chat_id}): {e}",
            exc_info=True,
        )
        stats.increment_error()
        try:
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        except Exception:
            pass
