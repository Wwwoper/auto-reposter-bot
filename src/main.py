"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import asyncio
import signal
import sys
from datetime import datetime
from pathlib import Path
from typing import Tuple, Set

from aiogram import Bot, Dispatcher
from aiogram.types import ContentTypes
from aiogram.utils import executor

from src.config import get_settings
from src.utils.logger import logger
from src.utils.stats import get_stats
from src.vk.api import VKAPI
from src.bot import handlers


def create_bot() -> Tuple[Bot, Dispatcher, VKAPI, Set[int], Path]:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

    Returns:
        Tuple: (bot, dispatcher, vk_api, white_list, temp_dir)
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings = get_settings()
    settings.validate()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    bot = Bot(token=settings.telegram_token)
    dp = Dispatcher(bot)
    vk = VKAPI(
        settings.vk_access_token,
        settings.vk_group_token,
        settings.vk_group_id,
        settings.vk_api_version,
    )

    logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. White list: {settings.white_list}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = get_stats()

    return bot, dp, vk, settings.white_list, settings.temp_photos_dir


async def cleanup_old_temp_files(temp_dir: Path, max_age_hours: int = 1) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞

    Args:
        temp_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å–∞—Ö
    """
    if not temp_dir.exists():
        return

    now = datetime.now().timestamp()
    removed = 0

    for file in temp_dir.glob("*.jpg"):
        try:
            age = now - file.stat().st_mtime
            if age > max_age_hours * 3600:
                file.unlink()
                removed += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")

    if removed > 0:
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {removed} —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")


async def on_startup(dp: Dispatcher) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    settings = get_settings()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await handlers.setup_bot_commands(dp.bot)

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await cleanup_old_temp_files(settings.temp_photos_dir, settings.cleanup_age_hours)

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
    async def periodic_cleanup():
        while True:
            await asyncio.sleep(settings.cleanup_interval_hours * 3600)
            await cleanup_old_temp_files(
                settings.temp_photos_dir, settings.cleanup_age_hours
            )

    asyncio.create_task(periodic_cleanup())


async def on_shutdown(dp: Dispatcher) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    settings = get_settings()
    stats = get_stats()

    # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    logger.info(stats.get_report())

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if settings.temp_photos_dir.exists():
        removed = 0
        for file in settings.temp_photos_dir.glob("*"):
            try:
                file.unlink()
                removed += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")
        if removed > 0:
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

    await dp.storage.close()
    await dp.storage.wait_closed()
    logger.info("Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def shutdown_handler(signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        if not handlers.is_shutting_down():
            handlers.set_shutting_down(True)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É—é graceful shutdown...")
            sys.exit(0)

    try:
        logger.info("=" * 50)
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        logger.info("=" * 50)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, shutdown_handler)
        signal.signal(signal.SIGTERM, shutdown_handler)

        bot, dp, vk, white_list, temp_dir = create_bot()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        dp.register_message_handler(handlers.send_welcome, commands=["start", "help"])
        dp.register_message_handler(handlers.send_stats, commands=["stats"])
        )
        dp.register_message_handler(
            lambda message: handlers.handle_photo(
                message, bot, vk, white_list, temp_dir
            ),
            content_types=ContentTypes.PHOTO,
        )

        # –ó–∞–ø—É—Å–∫ polling
        executor.start_polling(
            dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown
        )

    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        handlers.set_shutting_down(True)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
    finally:
        if handlers.is_shutting_down():
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()
