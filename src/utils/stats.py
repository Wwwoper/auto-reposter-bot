"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

from datetime import datetime, timedelta
from typing import Dict, Optional
import pytz


class Statistics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""

    def __init__(self):
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
        self.total_success: int = 0
        self.total_errors: int = 0
        self.start_time: datetime = datetime.now(pytz.UTC)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏ (–ú–°–ö)
        self.daily_success: int = 0
        self.daily_errors: int = 0
        self.daily_reset_date: Optional[datetime] = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.report_interval: int = 10  # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ N –ø–æ—Å—Ç–æ–≤
        self.moscow_tz = pytz.timezone("Europe/Moscow")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã —Å–±—Ä–æ—Å–∞
        self._check_and_reset_daily()

    def _check_and_reset_daily(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø–æ –ú–°–ö
        """
        now_msk = datetime.now(self.moscow_tz)
        today_msk = now_msk.replace(hour=0, minute=0, second=0, microsecond=0)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if self.daily_reset_date is None or self.daily_reset_date < today_msk:
            self.daily_success = 0
            self.daily_errors = 0
            self.daily_reset_date = today_msk

    def increment_success(self) -> None:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        self._check_and_reset_daily()
        self.total_success += 1
        self.daily_success += 1

    def increment_error(self) -> None:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö, –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫)"""
        self._check_and_reset_daily()
        self.total_errors += 1
        self.daily_errors += 1

    def should_log_stats(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å (–∫–∞–∂–¥—ã–µ N –ø–æ—Å—Ç–æ–≤)
        """
        total_posts = self.total_success + self.total_errors
        return total_posts > 0 and total_posts % self.report_interval == 0

    def get_uptime(self) -> timedelta:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

        Returns:
            timedelta: –í—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞
        """
        return datetime.now(pytz.UTC) - self.start_time

    def get_success_rate(self, use_daily: bool = False) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π

        Args:
            use_daily: –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å—É—Ç–∫–∏

        Returns:
            float: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π (0-100)
        """
        if use_daily:
            total = self.daily_success + self.daily_errors
            success = self.daily_success
        else:
            total = self.total_success + self.total_errors
            success = self.total_success

        if total == 0:
            return 0.0
        return (success / total) * 100

    def get_total_posts(self, use_daily: bool = False) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤

        Args:
            use_daily: –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å—É—Ç–∫–∏

        Returns:
            int: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        """
        if use_daily:
            return self.daily_success + self.daily_errors
        return self.total_success + self.total_errors

    def format_uptime(self) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "5–¥ 12—á 30–º")
        """
        uptime = self.get_uptime()
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, _ = divmod(remainder, 60)

        parts = []
        if days > 0:
            parts.append(f"{days}–¥")
        if hours > 0 or days > 0:
            parts.append(f"{hours}—á")
        parts.append(f"{minutes}–º")

        return " ".join(parts)

    def get_report(self, include_daily: bool = True) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Args:
            include_daily: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å—É—Ç–∫–∏

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        self._check_and_reset_daily()

        uptime = self.format_uptime()
        total_posts = self.get_total_posts()
        success_rate = self.get_success_rate()

        report_lines = [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
            "",
            f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}",
        ]

        if include_daily and (self.daily_success > 0 or self.daily_errors > 0):
            daily_rate = self.get_success_rate(use_daily=True)
            daily_total = self.get_total_posts(use_daily=True)

            report_lines.extend(
                [
                    "",
                    "üìÖ –ó–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏ (–ú–°–ö):",
                    f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {self.daily_success}",
                    f"‚ùå –û—à–∏–±–æ–∫: {self.daily_errors}",
                    f"üìà Success rate: {daily_rate:.1f}%",
                    f"üìù –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {daily_total}",
                ]
            )

        report_lines.extend(
            [
                "",
                "üìä –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:",
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {self.total_success}",
                f"‚ùå –û—à–∏–±–æ–∫: {self.total_errors}",
                f"üìà Success rate: {success_rate:.1f}%",
                f"üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_posts}",
            ]
        )

        return "\n".join(report_lines)

    def get_log_stats(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–≥–æ–≤

        Returns:
            str: –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥
        """
        self._check_and_reset_daily()

        uptime = self.format_uptime()
        success_rate = self.get_success_rate()

        return (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "
            f"‚úÖ{self.total_success} ‚ùå{self.total_errors} "
            f"({success_rate:.1f}%) –∑–∞ {uptime}"
        )

    def get_current_msk_time(self) -> datetime:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–°–ö

        Returns:
            datetime: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö
        """
        return datetime.now(self.moscow_tz)

    def reset_daily_stats(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.daily_success = 0
        self.daily_errors = 0
        self.daily_reset_date = datetime.now(self.moscow_tz).replace(
            hour=0, minute=0, second=0, microsecond=0
        )

    def get_dict(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è

        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        self._check_and_reset_daily()

        return {
            "total": {
                "success": self.total_success,
                "errors": self.total_errors,
                "total": self.get_total_posts(),
                "success_rate": self.get_success_rate(),
            },
            "daily": {
                "success": self.daily_success,
                "errors": self.daily_errors,
                "total": self.get_total_posts(use_daily=True),
                "success_rate": self.get_success_rate(use_daily=True),
                "reset_date": self.daily_reset_date.isoformat()
                if self.daily_reset_date
                else None,
            },
            "uptime": {
                "formatted": self.format_uptime(),
                "seconds": int(self.get_uptime().total_seconds()),
            },
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
_stats = Statistics()


def get_stats() -> Statistics:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    Returns:
        Statistics: –û–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    return _stats


def reset_daily_stats() -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä)
    """
    _stats.reset_daily_stats()
